{"ast":null,"code":"/* eslint-disable no-useless-escape */\nconst validations = data => {\n  const errors = {};\n  var regex = /^[a-zA-Z\\s]*$/;\n  var regexImage = /^(http(s)?:\\/\\/)?(www\\.)?[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+([a-zA-Z0-9_\\-\\.\\?\\\\/\\+=&;%#_]*)?$/;\n  if (regex.test(data.name)) {\n    return errors.name = \"Insert name with letters only!\";\n  } else if (data.name.trim() === \"\") {\n    return errors.name = \"Insert name!\";\n  } else if (data.name.length > 10) {\n    return errors.name = \"Insert name with less than 10 letters!\";\n  }\n  if (regexImage.test(data.image)) {\n    return errors.image = \"Insert name with less than 10 letters!\";\n  } else if (data.image.trim() === \"\") {\n    return errors.name = \"Insert image!\";\n  }\n\n  //   var height = data.height.split(\"-\").map((numero) => parseInt(numero.trim()));\n  //   if (\n  //     height.length !== 2 ||\n  //     isNaN(height[0]) || isNaN(height[1]) ||\n  //     height[0] > height[1]\n  //   ) {\n  //     return errors.height = \"Insert a min and a max, Eg: 31 - 40\";\n  //   } else if (data.height.trim() === \"\") {\n  //     return errors.height = \"Insert a min and a max, Eg: 31 - 40\";\n  //   }\n\n  //   var weight = data.weight.split(\"-\").map((numero) => parseInt(numero.trim()));\n  //   if (\n  //     weight.length !== 2 ||\n  //     isNaN(weight[0]) || isNaN(weight[1]) ||\n  //     weight[0] > weight[1]\n  //   ) {\n  //     return errors.weight = \"Insert a min and a max, Eg: 11 - 20\";\n  //   } else if (data.weight.trim() === \"\") {\n  //     return errors.weight = \"Insert a min and a max, Eg: 11 - 20\";\n  //   }\n\n  //   var yearsNumeric = parseInt(data.life_span.match(/\\d+/));\n\n  //   if (isNaN(yearsNumeric) || yearsNumeric < 0 || yearsNumeric > 20) {\n  //     return errors.life_span = \"Life Years are not valid\";\n  //   } else if(data.life_span.trim() === \"\") {\n  //     return errors.life_span = \"insert years of life, eg: 11 Years\";\n  //   }\n\n  return errors;\n};\nexport default validations;","map":{"version":3,"names":["validations","data","errors","regex","regexImage","test","name","trim","length","image"],"sources":["/Users/luciano/Desktop/PI-Dogs-main/client/src/components/Form/validate.js"],"sourcesContent":["/* eslint-disable no-useless-escape */\nconst validations = (data) => {\n  const errors = {};\n\n  var regex = /^[a-zA-Z\\s]*$/;\n  var regexImage = /^(http(s)?:\\/\\/)?(www\\.)?[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+([a-zA-Z0-9_\\-\\.\\?\\\\/\\+=&;%#_]*)?$/;\n\n  if (regex.test(data.name)) {\n    return errors.name = \"Insert name with letters only!\";\n  } else if (data.name.trim() === \"\") {\n    return errors.name = \"Insert name!\";\n  } else if (data.name.length > 10) {\n    return errors.name = \"Insert name with less than 10 letters!\";\n  }\n\n  if (regexImage.test(data.image)) {\n    return errors.image = \"Insert name with less than 10 letters!\";\n  } else if (data.image.trim() === \"\") {\n    return errors.name = \"Insert image!\";\n  }\n\n//   var height = data.height.split(\"-\").map((numero) => parseInt(numero.trim()));\n//   if (\n//     height.length !== 2 ||\n//     isNaN(height[0]) || isNaN(height[1]) ||\n//     height[0] > height[1]\n//   ) {\n//     return errors.height = \"Insert a min and a max, Eg: 31 - 40\";\n//   } else if (data.height.trim() === \"\") {\n//     return errors.height = \"Insert a min and a max, Eg: 31 - 40\";\n//   }\n\n//   var weight = data.weight.split(\"-\").map((numero) => parseInt(numero.trim()));\n//   if (\n//     weight.length !== 2 ||\n//     isNaN(weight[0]) || isNaN(weight[1]) ||\n//     weight[0] > weight[1]\n//   ) {\n//     return errors.weight = \"Insert a min and a max, Eg: 11 - 20\";\n//   } else if (data.weight.trim() === \"\") {\n//     return errors.weight = \"Insert a min and a max, Eg: 11 - 20\";\n//   }\n\n//   var yearsNumeric = parseInt(data.life_span.match(/\\d+/));\n  \n//   if (isNaN(yearsNumeric) || yearsNumeric < 0 || yearsNumeric > 20) {\n//     return errors.life_span = \"Life Years are not valid\";\n//   } else if(data.life_span.trim() === \"\") {\n//     return errors.life_span = \"insert years of life, eg: 11 Years\";\n//   }\n\n  return errors;\n};\n\nexport default validations;\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAIC,IAAI,IAAK;EAC5B,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAIC,KAAK,GAAG,eAAe;EAC3B,IAAIC,UAAU,GAAG,8FAA8F;EAE/G,IAAID,KAAK,CAACE,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,EAAE;IACzB,OAAOJ,MAAM,CAACI,IAAI,GAAG,gCAAgC;EACvD,CAAC,MAAM,IAAIL,IAAI,CAACK,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAClC,OAAOL,MAAM,CAACI,IAAI,GAAG,cAAc;EACrC,CAAC,MAAM,IAAIL,IAAI,CAACK,IAAI,CAACE,MAAM,GAAG,EAAE,EAAE;IAChC,OAAON,MAAM,CAACI,IAAI,GAAG,wCAAwC;EAC/D;EAEA,IAAIF,UAAU,CAACC,IAAI,CAACJ,IAAI,CAACQ,KAAK,CAAC,EAAE;IAC/B,OAAOP,MAAM,CAACO,KAAK,GAAG,wCAAwC;EAChE,CAAC,MAAM,IAAIR,IAAI,CAACQ,KAAK,CAACF,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACnC,OAAOL,MAAM,CAACI,IAAI,GAAG,eAAe;EACtC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;;EAEE,OAAOJ,MAAM;AACf,CAAC;AAED,eAAeF,WAAW"},"metadata":{},"sourceType":"module"}